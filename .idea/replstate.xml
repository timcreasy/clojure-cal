<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1480619001216">{:repl-history {:ide [], :local [&quot;(java.time.LocalDate/now)&quot; &quot;(defn get-current-date []\n  (.format (java.text.SimpleDateFormat. \&quot;MM/dd/yyyy\&quot;) (new java.util.Date)))&quot; &quot;\n(defn get-current-date []\n  (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date)))&quot; &quot;(get-current-date)&quot; &quot;\n(defn get-current-month []\n  (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date)))\n\n(defn get-current-year []\n  (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date)))&quot; &quot;(defn get-start-day-of-month [day month year]\n  (let [zmonth (if (&lt; month 3)\n                 (+ month 12)\n                 month)] zmonth))&quot; &quot;(defn get-current-day []\n  (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date)))\n\n(defn get-current-month []\n  (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date)))\n\n(defn get-current-year []\n  (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date)))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)] zmonth))\n&quot; &quot;(get)&quot; &quot;(get-start-day-of-month 01 03 2016)&quot; &quot;(get-start-day-of-month 01 02 2016)&quot; &quot;(get-start-day-of-month 01 01 2016)&quot; &quot;(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)] zmonth))\n&quot; &quot;(get-start-day-of-month (get-current-date) (get-current-month) (get-current-year))&quot; &quot;(defn get-year-of-century [year]\n  (mod year 100))&quot; &quot;(get-year-of-century 1900)&quot; &quot;(get-year-of-century 1902)\n                     &quot; &quot;(get-year-of-century 1934)\n                     &quot; &quot;(defn get-zero-based-century [year]\n  (/ year 100))\n&quot; &quot;(get-zero-based-century 1900)&quot; &quot;(defn get-zero-based-century [year]\n  (quot year 100))&quot; &quot;(get-zero-based-century 2004)&quot; &quot;(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (mod\n      (+ day\n         (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n         year\n         (int (Math/floor (/ year 4)))\n         5) 7)))&quot; &quot;(get-current-day)&quot; &quot;(get-current-month)&quot; &quot;(get-current-year)&quot; &quot;(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (mod (- (+ day\n               (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n               year\n               (int (Math/floor (/ year 4)))\n               (int (Math/floor (/ year 400))))\n            (int (Math/floor (/ year 100))))\n         7)))&quot; &quot;(get-start-day-of-month 1 11 2016)&quot; &quot;(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n(defn get-sunday-indexed-day [zeller-day]\n  (if (= zeller-day 0)\n    6\n    (mod (+ zeller-day 5) 6)))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (get-sunday-indexed-day\n      (mod (- (+ day\n                 (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n                 year\n                 (int (Math/floor (/ year 4)))\n                 (int (Math/floor (/ year 400))))\n              (int (Math/floor (/ year 100))))\n           7))))&quot; &quot;(get-start-day-of-month (get-current-day) (get-current-month) (get-current-year))&quot; &quot;(get-start-day-of-month 1 10 2016)&quot; &quot;(get-start-day-of-month 1 12 2016)&quot; &quot;(-main)&quot; &quot;(defn get-month-header [month year]\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (- month 1)))&quot; &quot;(get-month-header 12)&quot; &quot;(get-month-header 01 2016)&quot; &quot;(defn get-month-header [month year]\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) \&quot;2014-08-06\&quot;))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) \&quot;2014-08-06\&quot;))&quot; &quot;(get-month-header)&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;MMMMM\&quot;) \&quot;01\&quot;))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;MMMMM\&quot;) \&quot;January\&quot;))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot; (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month))))&quot; &quot;(get-month-header 1 2016)&quot; &quot;(get-month-header 12 2016)&quot; &quot;(defn get-month-header-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year))&quot; &quot;(get-month-header-string 01 2016)&quot; &quot;(defn get-pad-amount [text]\n  (quot\n    (- 20 (count text))\n    2))&quot; &quot;(get-pad-amount \&quot;January 2016\&quot;)&quot; &quot;(get-pad-amount \&quot;December 2016\&quot;)&quot; &quot;(defn get-left-pad [text]\n  (apply str (repeat (get-pad-amount text) \&quot; \&quot;)))&quot; &quot;(get-left-pad \&quot;December 2016\&quot;)&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-left-pad month-year-string)\n      month-year-string)))\n\n\n(defn get-day-of-week-header-string []\n  (\&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn say-hello [name]\n  (println (str \&quot;Hello, \&quot; name)))&quot; &quot;(get-month-year-header-string 12 2016)&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (\&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (print\n    (get-month-year-header-string month year)\n    (get-day-of-week-header-string)))&quot; &quot;(defn print-month [month year]\n  (print\n    (str\n      (get-month-year-header-string month year)\n      (get-day-of-week-header-string))))&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (str \&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (print\n    (get-month-year-header-string month year)\n    (get-day-of-week-header-string)))&quot; &quot;(defn print-month [month year]\n  (println\n    (str\n      (get-month-year-header-string month year)\n      (get-day-of-week-header-string))))&quot; &quot;\n(defn get-start-week-left-pad [start-day]\n  (apply str (repeat (* start-day 3) \&quot; \&quot;)))&quot; &quot;(get-start-week-left-pad 4)&quot; &quot;(ns left-pad.core)\n\n(defn get-header-pad-amount [text]\n  (quot\n    (- 20 (count text))\n    2))\n\n(defn get-header-left-pad [text]\n  (apply str (repeat (get-header-pad-amount text) \&quot; \&quot;)))\n\n(defn get-start-week-left-pad [start-day]\n  (apply str (repeat (* start-day 3) \&quot; \&quot;)))&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-header-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (str \&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (println\n    (str\n      (get-month-year-header-string month year)\n      (get-day-of-week-header-string)\n      (get-start-week-left-pad))))&quot; &quot;(ns zeller.core)\n\n(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n(defn get-sunday-indexed-day [zeller-day]\n  (if (= zeller-day 0)\n    6\n    (mod (+ zeller-day 5) 6)))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [month year]\n  (let [zmonth (get-zeller-month month)]\n    (get-sunday-indexed-day\n      (mod (- (+ 1\n                 (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n                 year\n                 (int (Math/floor (/ year 4)))\n                 (int (Math/floor (/ year 400))))\n              (int (Math/floor (/ year 100))))\n           7))))&quot; &quot;(ns left-pad.core)\n\n(defn get-header-pad-amount [text]\n  (quot\n    (- 20 (count text))\n    2))\n\n(defn get-header-left-pad [text]\n  (apply str (repeat (get-header-pad-amount text) \&quot; \&quot;)))\n\n(defn get-start-week-left-pad [start-day]\n  (apply str (repeat (+ 1 (* start-day 3)) \&quot; \&quot;)))&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]\n            [zeller.core :as zeller]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-header-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (str \&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (let [start-day-of-week (zeller/get-start-day-of-month month year)]\n    (println\n      (str\n        (get-month-year-header-string month year)\n        (get-day-of-week-header-string)\n        (get-start-week-left-pad start-day-of-week)))))&quot; &quot;(print-month 12 2016)&quot;], :remote []}}</component>
</project>