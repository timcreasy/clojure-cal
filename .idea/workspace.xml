<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="3ece5c49-98e3-4557-8dc8-7f1466f957cc" name="Default" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CreatePatchCommitExecutor">
    <option name="PATCH_PATH" value="" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="default_target" />
  <component name="FavoritesManager">
    <favorites_list name="clojure-cal" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/clojure_cal/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="255">
              <caret line="17" column="0" lean-forward="true" selection-start-line="17" selection-start-column="0" selection-end-line="17" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/print_month/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="300">
              <caret line="20" column="26" lean-forward="true" selection-start-line="20" selection-start-column="26" selection-end-line="20" selection-end-column="26" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/left_pad/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="165">
              <caret line="11" column="43" lean-forward="true" selection-start-line="11" selection-start-column="43" selection-end-line="11" selection-end-column="43" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/zeller/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="480">
              <caret line="32" column="27" lean-forward="true" selection-start-line="32" selection-start-column="27" selection-end-line="32" selection-end-column="27" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/add-left-pad/core.clj" />
        <option value="$PROJECT_DIR$/src/print-month/core.clj" />
        <option value="$PROJECT_DIR$/src/left-pad/core.clj" />
        <option value="$PROJECT_DIR$/src/zeller/core.clj" />
        <option value="$PROJECT_DIR$/src/left_pad/core.clj" />
        <option value="$PROJECT_DIR$/src/print_month/core.clj" />
        <option value="$PROJECT_DIR$/src/clojure_cal/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="1440" />
    <option name="y" value="-493" />
    <option name="width" value="1920" />
    <option name="height" value="1080" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="Scratches" />
      <pane id="ProjectPane">
        <subPane>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="src" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="src" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="print_month" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="clojure-cal" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="src" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="left_pad" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="ReplState" timestamp="1480621111354">{:repl-history {:ide [], :local [&quot;(java.time.LocalDate/now)&quot; &quot;(defn get-current-date []\n  (.format (java.text.SimpleDateFormat. \&quot;MM/dd/yyyy\&quot;) (new java.util.Date)))&quot; &quot;\n(defn get-current-date []\n  (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date)))&quot; &quot;(get-current-date)&quot; &quot;\n(defn get-current-month []\n  (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date)))\n\n(defn get-current-year []\n  (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date)))&quot; &quot;(defn get-start-day-of-month [day month year]\n  (let [zmonth (if (&lt; month 3)\n                 (+ month 12)\n                 month)] zmonth))&quot; &quot;(defn get-current-day []\n  (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date)))\n\n(defn get-current-month []\n  (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date)))\n\n(defn get-current-year []\n  (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date)))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)] zmonth))\n&quot; &quot;(get)&quot; &quot;(get-start-day-of-month 01 03 2016)&quot; &quot;(get-start-day-of-month 01 02 2016)&quot; &quot;(get-start-day-of-month 01 01 2016)&quot; &quot;(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)] zmonth))\n&quot; &quot;(get-start-day-of-month (get-current-date) (get-current-month) (get-current-year))&quot; &quot;(defn get-year-of-century [year]\n  (mod year 100))&quot; &quot;(get-year-of-century 1900)&quot; &quot;(get-year-of-century 1902)\n                     &quot; &quot;(get-year-of-century 1934)\n                     &quot; &quot;(defn get-zero-based-century [year]\n  (/ year 100))\n&quot; &quot;(get-zero-based-century 1900)&quot; &quot;(defn get-zero-based-century [year]\n  (quot year 100))&quot; &quot;(get-zero-based-century 2004)&quot; &quot;(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (mod\n      (+ day\n         (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n         year\n         (int (Math/floor (/ year 4)))\n         5) 7)))&quot; &quot;(get-current-day)&quot; &quot;(get-current-month)&quot; &quot;(get-current-year)&quot; &quot;(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (mod (- (+ day\n               (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n               year\n               (int (Math/floor (/ year 4)))\n               (int (Math/floor (/ year 400))))\n            (int (Math/floor (/ year 100))))\n         7)))&quot; &quot;(get-start-day-of-month 1 11 2016)&quot; &quot;(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n(defn get-sunday-indexed-day [zeller-day]\n  (if (= zeller-day 0)\n    6\n    (mod (+ zeller-day 5) 6)))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (get-sunday-indexed-day\n      (mod (- (+ day\n                 (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n                 year\n                 (int (Math/floor (/ year 4)))\n                 (int (Math/floor (/ year 400))))\n              (int (Math/floor (/ year 100))))\n           7))))&quot; &quot;(get-start-day-of-month (get-current-day) (get-current-month) (get-current-year))&quot; &quot;(get-start-day-of-month 1 10 2016)&quot; &quot;(get-start-day-of-month 1 12 2016)&quot; &quot;(defn get-month-header [month year]\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (- month 1)))&quot; &quot;(get-month-header 12)&quot; &quot;(get-month-header 01 2016)&quot; &quot;(defn get-month-header [month year]\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) \&quot;2014-08-06\&quot;))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) \&quot;2014-08-06\&quot;))&quot; &quot;(get-month-header)&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;MMMMM\&quot;) \&quot;01\&quot;))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;MMMMM\&quot;) \&quot;January\&quot;))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot; (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))))&quot; &quot;(defn get-month-header [month year]\n  ;(.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) year month)))\n  (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month))))&quot; &quot;(get-month-header 1 2016)&quot; &quot;(get-month-header 12 2016)&quot; &quot;(defn get-month-header-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year))&quot; &quot;(get-month-header-string 01 2016)&quot; &quot;(defn get-pad-amount [text]\n  (quot\n    (- 20 (count text))\n    2))&quot; &quot;(get-pad-amount \&quot;January 2016\&quot;)&quot; &quot;(get-pad-amount \&quot;December 2016\&quot;)&quot; &quot;(defn get-left-pad [text]\n  (apply str (repeat (get-pad-amount text) \&quot; \&quot;)))&quot; &quot;(get-left-pad \&quot;December 2016\&quot;)&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-left-pad month-year-string)\n      month-year-string)))\n\n\n(defn get-day-of-week-header-string []\n  (\&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn say-hello [name]\n  (println (str \&quot;Hello, \&quot; name)))&quot; &quot;(get-month-year-header-string 12 2016)&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (\&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (print\n    (get-month-year-header-string month year)\n    (get-day-of-week-header-string)))&quot; &quot;(defn print-month [month year]\n  (print\n    (str\n      (get-month-year-header-string month year)\n      (get-day-of-week-header-string))))&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (str \&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (print\n    (get-month-year-header-string month year)\n    (get-day-of-week-header-string)))&quot; &quot;(defn print-month [month year]\n  (println\n    (str\n      (get-month-year-header-string month year)\n      (get-day-of-week-header-string))))&quot; &quot;\n(defn get-start-week-left-pad [start-day]\n  (apply str (repeat (* start-day 3) \&quot; \&quot;)))&quot; &quot;(get-start-week-left-pad 4)&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-header-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (str \&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (println\n    (str\n      (get-month-year-header-string month year)\n      (get-day-of-week-header-string)\n      (get-start-week-left-pad))))&quot; &quot;(ns zeller.core)\n\n(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n(defn get-sunday-indexed-day [zeller-day]\n  (if (= zeller-day 0)\n    6\n    (mod (+ zeller-day 5) 6)))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-start-day-of-month [month year]\n  (let [zmonth (get-zeller-month month)]\n    (get-sunday-indexed-day\n      (mod (- (+ 1\n                 (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n                 year\n                 (int (Math/floor (/ year 4)))\n                 (int (Math/floor (/ year 400))))\n              (int (Math/floor (/ year 100))))\n           7))))&quot; &quot;(ns left-pad.core)\n\n(defn get-header-pad-amount [text]\n  (quot\n    (- 20 (count text))\n    2))\n\n(defn get-header-left-pad [text]\n  (apply str (repeat (get-header-pad-amount text) \&quot; \&quot;)))\n\n(defn get-start-week-left-pad [start-day]\n  (apply str (repeat (+ 1 (* start-day 3)) \&quot; \&quot;)))&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]\n            [zeller.core :as zeller]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-header-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (str \&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn print-month [month year]\n  (let [start-day-of-week (zeller/get-start-day-of-month month year)]\n    (println\n      (str\n        (get-month-year-header-string month year)\n        (get-day-of-week-header-string)\n        (get-start-week-left-pad start-day-of-week)))))&quot; &quot;(print-month 12 2016)&quot; &quot;(ns clojure-cal.core\n  (:require [print-month.core :as pm])\n  (:gen-class))\n\n;(defn -main [&amp; args]\n;  (z/get-start-day-of-month (z/get-current-day) (z/get-current-month) (z/get-current-year)))\n\n(pm/print-month 12 2016)&quot; &quot;(defn get-days-in-month [month]\n  (case month\n    31 1\n    28 2\n    31 3\n    30 4\n    31 5\n    30 6\n    31 7\n    31 8\n    30 9\n    31 10\n    30 11\n    31 12))&quot; &quot;(defn get-days-in-month [month]\n  (case month\n    1 31\n    2 28\n    3 31\n    4 30\n    5 31\n    6 30\n    7 31\n    8 31\n    9 30\n    10 31\n    11 30\n    12 31))&quot; &quot;(get-days-in-month 12)&quot; &quot;(get-days-in-month 6)&quot; &quot;(get-days-in-month 2)\n                   &quot; &quot;(defn is-leap-year? [year]\n  (or\n    (and\n      (not= (mod year 100) 0)\n      (= (mod year 4) 0))\n    (= (mod year 400) 0)))\n\n(defn get-days-in-month [month year]\n  (case month\n    1 31\n    2 (if (is-leap-year? year)\n        29\n        28)\n    3 31\n    4 30\n    5 31\n    6 30\n    7 31\n    8 31\n    9 30\n    10 31\n    11 30\n    12 31))&quot; &quot;(get-days-in-month 2 2016)\n                   &quot; &quot;(get-days-in-month 2 2015)\n                   &quot; &quot;(&lt; 3 12)&quot; &quot;(&lt; 13 12)&quot; &quot;(defn get-days-in-month [month year]\n  (case month\n    1 31\n    2 (if (is-leap-year? year)\n        29\n        28)\n    3 31\n    4 30\n    5 31\n    6 30\n    7 31\n    8 31\n    9 30\n    10 31\n    11 30\n    12 31))\n\n(defn get-days-string [month year]\n  (let [days-in-month (get-days-in-month month)]\n    (loop [i 0 days-string-collec []]\n      (if (&lt; i days-in-month)\n        (recur (inc i) (conj days-string-collec (str i)))\n        days-string-collec))))&quot; &quot;(defn get-days-string [month year]\n  (let [days-in-month (get-days-in-month month year)]\n    (loop [i 0 days-string-collec []]\n      (if (&lt; i days-in-month)\n        (recur (inc i) (conj days-string-collec (str i)))\n        days-string-collec))))&quot; &quot;(get-days-string 2 2016)&quot; &quot;(defn get-days-string [month year]\n  ;(apply str\n  (let [days-in-month (get-days-in-month month year)]\n    (loop [i 1 days-string-collec []]\n      (if (&lt;= i days-in-month)\n        (recur (inc i) (if (= 0 (mod (zeller/get-day-of-month i month year) 6))\n                         (conj days-string-collec (str (get-day-string i) \&quot; \\n\&quot;))\n                         (conj days-string-collec (str (get-day-string i) \&quot; \&quot;))))\n        days-string-collec))))&quot; &quot;(ns zeller.core)\n\n(defn get-current-day []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;dd\&quot;) (new java.util.Date))))\n\n(defn get-current-month []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;MM\&quot;) (new java.util.Date))))\n\n(defn get-current-year []\n  (Integer. (.format (java.text.SimpleDateFormat. \&quot;yyyy\&quot;) (new java.util.Date))))\n\n; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n(defn get-sunday-indexed-day [zeller-day]\n  (if (= zeller-day 0)\n    6\n    (mod (+ zeller-day 5) 6)))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (get-sunday-indexed-day\n      (mod (- (+ day\n                 (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n                 year\n                 (int (Math/floor (/ year 4)))\n                 (int (Math/floor (/ year 400))))\n              (int (Math/floor (/ year 100))))\n           7))))\n&quot; &quot;(ns left-pad.core)\n\n(defn get-header-pad-amount [text]\n  (quot\n    (- 20 (count text))\n    2))\n\n(defn get-header-left-pad [text]\n  (apply str (repeat (get-header-pad-amount text) \&quot; \&quot;)))\n\n(defn get-start-week-left-pad [start-day]\n  (apply str (repeat (* start-day 3) \&quot; \&quot;)))&quot; &quot;(ns print-month.core\n  (:require [left-pad.core :as left-pad]\n            [zeller.core :as zeller]))\n\n(defn get-month-year-string [month year]\n  (str\n    (.format (java.text.SimpleDateFormat. \&quot;MMMM\&quot;) (.parse (java.text.SimpleDateFormat. \&quot;yyyy-MM\&quot;) (str year \&quot;-\&quot; month)))\n    \&quot; \&quot;\n    year\n    \&quot;\\n\&quot;))\n\n(defn get-month-year-header-string [month year]\n  (let [month-year-string (get-month-year-string month year)]\n    (str\n      (left-pad/get-header-left-pad month-year-string)\n      month-year-string)))\n\n(defn get-day-of-week-header-string []\n  (str \&quot;Su Mo Tu We Th Fr Sa\\n\&quot;))\n\n(defn is-leap-year? [year]\n  (or\n    (and\n      (not= (mod year 100) 0)\n      (= (mod year 4) 0))\n    (= (mod year 400) 0)))\n\n(defn get-days-in-month [month year]\n  (case month\n    1 31\n    2 (if (is-leap-year? year)\n        29\n        28)\n    3 31\n    4 30\n    5 31\n    6 30\n    7 31\n    8 31\n    9 30\n    10 31\n    11 30\n    12 31))\n\n(defn get-day-string [day]\n  (if (&lt; day 10)\n    (str \&quot; \&quot; day)\n    (str day)))\n\n(defn get-days-string [month year]\n  ;(apply str\n  (let [days-in-month (get-days-in-month month year)]\n    (loop [i 1 days-string-collec []]\n      (if (&lt;= i days-in-month)\n        (recur (inc i) (if (= 0 (mod (zeller/get-day-of-month i month year) 6))\n                         (conj days-string-collec (str (get-day-string i) \&quot; \\n\&quot;))\n                         (conj days-string-collec (str (get-day-string i) \&quot; \&quot;))))\n        days-string-collec))))\n\n(defn print-month [month year]\n  (let [start-day-of-week (zeller/get-day-of-month 1 month year)]\n    (println\n      (str\n        (get-month-year-header-string month year)\n        (get-day-of-week-header-string)\n        (left-pad/get-start-week-left-pad start-day-of-week)\n        (get-days-string month year)))))&quot; &quot;(defn get-days-string [month year]\n  ;(apply str\n  (let [days-in-month (get-days-in-month month year)]\n    (loop [i 1 days-string-collec []]\n      (if (&lt;= i days-in-month)\n        (recur (inc i) (if (= 0 (mod (zeller/get-day-of-month i month year) 6))\n                         (conj days-string-collec (str (get-day-string i) \&quot; \\n\&quot;) (zeller/get-day-of-month i month year))\n                         (conj days-string-collec (str (get-day-string i) \&quot; \&quot;))))\n        days-string-collec))))\n&quot; &quot;(defn get-days-string [month year]\n  ;(apply str\n  (let [days-in-month (get-days-in-month month year)]\n    (loop [i 1 days-string-collec []]\n      (let [day-of-month (zeller/get-day-of-month i month year)]\n        (if (&lt;= i days-in-month)\n          (recur (inc i) (if (= 0 (mod day-of-month 6))\n                           (conj days-string-collec (str (get-day-string i) \&quot; \\n\&quot;) (zeller/get-day-of-month i month year))\n                           (conj days-string-collec (str (get-day-string i) \&quot; \&quot;))))\n          days-string-collec)))))&quot; &quot;(defn get-days-string [month year]\n  ;(apply str\n  (let [days-in-month (get-days-in-month month year)]\n    (loop [i 1 days-string-collec []]\n      (let [day-of-month (zeller/get-day-of-month i month year)]\n        (if (&lt;= i days-in-month)\n          (recur (inc i) (if (and (!= 0 day-of-month) (= 0 (mod day-of-month 6)))\n                           (conj days-string-collec (str (get-day-string i) \&quot; \\n\&quot;) (zeller/get-day-of-month i month year))\n                           (conj days-string-collec (str (get-day-string i) \&quot; \&quot;))))\n          days-string-collec)))))&quot; &quot;(!= 5 4 )&quot; &quot;(defn get-days-string [month year]\n  ;(apply str\n  (let [days-in-month (get-days-in-month month year)]\n    (loop [i 1 days-string-collec []]\n      (let [day-of-month (zeller/get-day-of-month i month year)]\n        (if (&lt;= i days-in-month)\n          (recur (inc i) (if (and (not= 0 day-of-month) (= 0 (mod day-of-month 6)))\n                           (conj days-string-collec (str (get-day-string i) \&quot; \\n\&quot;) (zeller/get-day-of-month i month year))\n                           (conj days-string-collec (str (get-day-string i) \&quot; \&quot;))))\n          days-string-collec)))))&quot; &quot;(get-days-string 12 2016)&quot; &quot;\n(defn greet\n  ([] (greet \&quot;you\&quot;))\n  ([name] (print \&quot;Hello\&quot; name)))\n&quot; &quot;(greet)&quot; &quot;(greet \&quot;Tim\&quot;)&quot; &quot;(ns clojure-cal.core\n  (:require [print-month.core :as pm])\n  (:gen-class))\n\n(defn no-arg []\n  ;([] (do\n  ;      (let [date-string (.format (java.text.SimpleDateFormat. \&quot;MM yyyy\&quot;) (new java.util.Date))])))\n  (println \&quot;Hello\&quot;))\n;\n;(defn -main\n;  ; No month and year specified\n;  ([] no-arg)\n;  ([month year] (pm/print-month 12 2016)))\n;\n\n(defn -main\n  ([] no-arg)\n  ([name] (pm/print-month 12 2016)))\n&quot; &quot;(-main)&quot; &quot;(defn get-sunday-indexed-day [zeller-day]\n  (if (= zeller-day 0)\n    6\n    (mod (+ zeller-day 5) 6)))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (get-sunday-indexed-day\n      (mod (- (+ day\n                 (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n                 year\n                 (int (Math/floor (/ year 4)))\n                 (int (Math/floor (/ year 400))))\n              (int (Math/floor (/ year 100))))\n           7))))\n&quot; &quot;; Get offset month for zeller's congruence\n(defn get-zeller-month [month]\n  (if (&lt; month 3)\n    (+ month 12)\n    month))\n\n(defn get-year-of-century [year]\n  (mod year 100))\n\n(defn get-zero-based-century [year]\n  (quot year 100))\n\n(defn get-sunday-indexed-day [zeller-day]\n  (if (= zeller-day 0)\n    6\n    (mod (+ zeller-day 5) 6)))\n\n; Get day of week of beginning of month using Zeller's congruence\n; https://en.wikipedia.org/wiki/Zeller's_congruence\n(defn get-day-of-month [day month year]\n  (let [zmonth (get-zeller-month month)]\n    (get-sunday-indexed-day\n      (mod (- (+ day\n                 (int (Math/floor (/ (* 13 (+ zmonth 1)) 5)))\n                 year\n                 (int (Math/floor (/ year 4)))\n                 (int (Math/floor (/ year 400))))\n              (int (Math/floor (/ year 100))))\n           7))))\n&quot; &quot;(ns)&quot; &quot;(ns *ns*)&quot; &quot;*ns*&quot;], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.Lein REPL">
    <configuration default="false" name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="clojure-cal" />
      <setting name="path" value="$PROJECT_DIR$/src/clojure_cal/core.clj" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/clojure_cal" />
      <setting name="repl" value="false" />
      <method />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
      <method />
    </configuration>
    <configuration default="true" type="AndroidRunConfigurationType" factoryName="Android App">
      <module name="" />
      <option name="DEPLOY" value="true" />
      <option name="ARTIFACT_NAME" value="" />
      <option name="PM_INSTALL_OPTIONS" value="" />
      <option name="ACTIVITY_EXTRA_FLAGS" value="" />
      <option name="MODE" value="default_activity" />
      <option name="TARGET_SELECTION_MODE" value="SHOW_DIALOG" />
      <option name="PREFERRED_AVD" value="" />
      <option name="CLEAR_LOGCAT" value="false" />
      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
      <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
      <option name="FORCE_STOP_RUNNING_APP" value="true" />
      <option name="DEBUGGER_TYPE" value="Java" />
      <option name="USE_LAST_SELECTED_DEVICE" value="false" />
      <option name="PREFERRED_AVD" value="" />
      <Java />
      <Profilers>
        <option name="ENABLE_ADVANCED_PROFILING" value="true" />
        <option name="GAPID_ENABLED" value="false" />
        <option name="GAPID_DISABLE_PCS" value="false" />
        <option name="SUPPORT_LIB_ENABLED" value="true" />
        <option name="INSTRUMENTATION_ENABLED" value="true" />
      </Profilers>
      <option name="DEEP_LINK" value="" />
      <option name="ACTIVITY_CLASS" value="" />
      <method />
    </configuration>
    <configuration default="true" type="AndroidTestRunConfigurationType" factoryName="Android Tests">
      <module name="" />
      <option name="TESTING_TYPE" value="0" />
      <option name="INSTRUMENTATION_RUNNER_CLASS" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="CLASS_NAME" value="" />
      <option name="PACKAGE_NAME" value="" />
      <option name="EXTRA_OPTIONS" value="" />
      <option name="TARGET_SELECTION_MODE" value="SHOW_DIALOG" />
      <option name="PREFERRED_AVD" value="" />
      <option name="CLEAR_LOGCAT" value="false" />
      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
      <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
      <option name="FORCE_STOP_RUNNING_APP" value="true" />
      <option name="DEBUGGER_TYPE" value="Java" />
      <option name="USE_LAST_SELECTED_DEVICE" value="false" />
      <option name="PREFERRED_AVD" value="" />
      <Java />
      <Profilers>
        <option name="ENABLE_ADVANCED_PROFILING" value="true" />
        <option name="GAPID_ENABLED" value="false" />
        <option name="GAPID_DISABLE_PCS" value="false" />
        <option name="SUPPORT_LIB_ENABLED" value="true" />
        <option name="INSTRUMENTATION_ENABLED" value="true" />
      </Profilers>
      <method />
    </configuration>
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
      <method />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <configuration default="true" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="" />
      <setting name="path" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="" />
      <setting name="repl" value="false" />
      <method />
    </configuration>
    <configuration default="true" type="GradleRunConfiguration" factoryName="Gradle">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list />
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <method />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
      <method />
    </configuration>
    <configuration default="true" type="JarApplication" factoryName="JAR Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Java Scratch" factoryName="Java Scratch">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="SCRATCH_FILE_ID" value="0" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="JetRunConfigurationType" factoryName="Kotlin">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="clojure-cal" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType" factoryName="Kotlin script">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="filePath" />
      <option name="vmParameters" />
      <option name="alternativeJrePath" />
      <option name="programParameters" />
      <option name="passParentEnvs" value="true" />
      <option name="workingDirectory" />
      <option name="isAlternativeJrePathEnabled" value="false" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
      <method />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
      <method />
    </configuration>
    <configuration default="false" name="Lein REPL" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="clojure-cal" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <list size="2">
      <item index="0" class="java.lang.String" itemvalue="Clojure REPL.Lein REPL" />
      <item index="1" class="java.lang.String" itemvalue="Clojure Application.core" />
    </list>
    <recent_temporary>
      <list size="1">
        <item index="0" class="java.lang.String" itemvalue="Clojure Application.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="3ece5c49-98e3-4557-8dc8-7f1466f957cc" name="Default" comment="" />
      <created>1480604417126</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1480604417126</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="1440" y="-493" width="1920" height="1080" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Nl-Palette" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.45416668" sideWeight="0.5" order="-1" side_tool="true" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32937685" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="false" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Properties" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.1359375" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39960435" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="true" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager />
    <watches-manager />
  </component>
  <component name="antWorkspaceConfiguration">
    <option name="IS_AUTOSCROLL_TO_SOURCE" value="false" />
    <option name="FILTER_TARGETS" value="false" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/zeller/print-month/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/zeller/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="480">
          <caret line="32" column="27" lean-forward="true" selection-start-line="32" selection-start-column="27" selection-end-line="32" selection-end-column="27" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/left_pad/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="165">
          <caret line="11" column="43" lean-forward="true" selection-start-line="11" selection-start-column="43" selection-end-line="11" selection-end-column="43" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/print_month/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="300">
          <caret line="20" column="26" lean-forward="true" selection-start-line="20" selection-start-column="26" selection-end-line="20" selection-end-column="26" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_cal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="17" column="0" lean-forward="true" selection-start-line="17" selection-start-column="0" selection-end-line="17" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
</project>